package sign

import (
	"crypto/ecdsa"
	"crypto/sha256"
	"encoding/hex"
	"fmt"
	"github.com/decred/dcrd/dcrec/secp256k1/v2"
	"github.com/stretchr/testify/require"
	"math/big"
	"testing"
)

func TestGetEcdsaDerivedPubKey(t *testing.T) {
	share1Data := `{"Id":1,"ShareI":"163221320546770598315927537607524809869686796735061812847987745744291656651908","PublicKey":{"Curve":"ecdsa","X":"77511479113478787276683164703756512079468144247331279384115793555066882718049","Y":"24155368055410694424290104402980845906272542866002651687083323648969487045524"},"ChainCode":"019e2d60f38de7c4c69b3565297eb2920f329be0e3e91e2578ddf8445251b72735","SharePubKeyMap":{"1":{"Curve":"ecdsa","X":"45896803107583609356336146339617643479737519708351305488677813694135025398396","Y":"48097755851094242614485405280017677029214429702906767626354999124068603271482"},"2":{"Curve":"ecdsa","X":"72079370914520044431767148076522103715805602531419237544696672190734763041094","Y":"44176234249645298016767380461080991277326563908377796879201068811280596803450"},"3":{"Curve":"ecdsa","X":"70344544008090881753844301764140028470886898404439842171545997008285653108854","Y":"51697166071315702728400670596651493110607867601417209803837910230417306848294"}}}`
	share2Data := `{"Id":2,"ShareI":"111199412033506399468473520808590107904180862687791078392107275736909699737136","PublicKey":{"Curve":"ecdsa","X":"77511479113478787276683164703756512079468144247331279384115793555066882718049","Y":"24155368055410694424290104402980845906272542866002651687083323648969487045524"},"ChainCode":"019e2d60f38de7c4c69b3565297eb2920f329be0e3e91e2578ddf8445251b72735","SharePubKeyMap":{"1":{"Curve":"ecdsa","X":"45896803107583609356336146339617643479737519708351305488677813694135025398396","Y":"48097755851094242614485405280017677029214429702906767626354999124068603271482"},"2":{"Curve":"ecdsa","X":"72079370914520044431767148076522103715805602531419237544696672190734763041094","Y":"44176234249645298016767380461080991277326563908377796879201068811280596803450"},"3":{"Curve":"ecdsa","X":"70344544008090881753844301764140028470886898404439842171545997008285653108854","Y":"51697166071315702728400670596651493110607867601417209803837910230417306848294"}}}`
	_ = `{"Id":3,"ShareI":"174969592757558396044590489018343313791512492919595248318831968871045904316701","PublicKey":{"Curve":"ecdsa","X":"77511479113478787276683164703756512079468144247331279384115793555066882718049","Y":"24155368055410694424290104402980845906272542866002651687083323648969487045524"},"ChainCode":"019e2d60f38de7c4c69b3565297eb2920f329be0e3e91e2578ddf8445251b72735","SharePubKeyMap":{"1":{"Curve":"ecdsa","X":"45896803107583609356336146339617643479737519708351305488677813694135025398396","Y":"48097755851094242614485405280017677029214429702906767626354999124068603271482"},"2":{"Curve":"ecdsa","X":"72079370914520044431767148076522103715805602531419237544696672190734763041094","Y":"44176234249645298016767380461080991277326563908377796879201068811280596803450"},"3":{"Curve":"ecdsa","X":"70344544008090881753844301764140028470886898404439842171545997008285653108854","Y":"51697166071315702728400670596651493110607867601417209803837910230417306848294"}}}`

	pubKeyHex, err := GetEcdsaDerivedPubKey(share1Data, share2Data, 100)
	require.NoError(t, err)

	fmt.Println(pubKeyHex)
}

func TestEcdsaSign(t *testing.T) {
	share1Data := `{"Id":1,"ShareI":"163221320546770598315927537607524809869686796735061812847987745744291656651908","PublicKey":{"Curve":"ecdsa","X":"77511479113478787276683164703756512079468144247331279384115793555066882718049","Y":"24155368055410694424290104402980845906272542866002651687083323648969487045524"},"ChainCode":"019e2d60f38de7c4c69b3565297eb2920f329be0e3e91e2578ddf8445251b72735","SharePubKeyMap":{"1":{"Curve":"ecdsa","X":"45896803107583609356336146339617643479737519708351305488677813694135025398396","Y":"48097755851094242614485405280017677029214429702906767626354999124068603271482"},"2":{"Curve":"ecdsa","X":"72079370914520044431767148076522103715805602531419237544696672190734763041094","Y":"44176234249645298016767380461080991277326563908377796879201068811280596803450"},"3":{"Curve":"ecdsa","X":"70344544008090881753844301764140028470886898404439842171545997008285653108854","Y":"51697166071315702728400670596651493110607867601417209803837910230417306848294"}}}`
	share2Data := `{"Id":2,"ShareI":"111199412033506399468473520808590107904180862687791078392107275736909699737136","PublicKey":{"Curve":"ecdsa","X":"77511479113478787276683164703756512079468144247331279384115793555066882718049","Y":"24155368055410694424290104402980845906272542866002651687083323648969487045524"},"ChainCode":"019e2d60f38de7c4c69b3565297eb2920f329be0e3e91e2578ddf8445251b72735","SharePubKeyMap":{"1":{"Curve":"ecdsa","X":"45896803107583609356336146339617643479737519708351305488677813694135025398396","Y":"48097755851094242614485405280017677029214429702906767626354999124068603271482"},"2":{"Curve":"ecdsa","X":"72079370914520044431767148076522103715805602531419237544696672190734763041094","Y":"44176234249645298016767380461080991277326563908377796879201068811280596803450"},"3":{"Curve":"ecdsa","X":"70344544008090881753844301764140028470886898404439842171545997008285653108854","Y":"51697166071315702728400670596651493110607867601417209803837910230417306848294"}}}`
	_ = `{"Id":3,"ShareI":"174969592757558396044590489018343313791512492919595248318831968871045904316701","PublicKey":{"Curve":"ecdsa","X":"77511479113478787276683164703756512079468144247331279384115793555066882718049","Y":"24155368055410694424290104402980845906272542866002651687083323648969487045524"},"ChainCode":"019e2d60f38de7c4c69b3565297eb2920f329be0e3e91e2578ddf8445251b72735","SharePubKeyMap":{"1":{"Curve":"ecdsa","X":"45896803107583609356336146339617643479737519708351305488677813694135025398396","Y":"48097755851094242614485405280017677029214429702906767626354999124068603271482"},"2":{"Curve":"ecdsa","X":"72079370914520044431767148076522103715805602531419237544696672190734763041094","Y":"44176234249645298016767380461080991277326563908377796879201068811280596803450"},"3":{"Curve":"ecdsa","X":"70344544008090881753844301764140028470886898404439842171545997008285653108854","Y":"51697166071315702728400670596651493110607867601417209803837910230417306848294"}}}`

	hash := sha256.New()
	hash.Write([]byte("hello"))
	message := hash.Sum(nil)
	r, s, err := EcdsaSign(share1Data, share2Data, 100, message)
	require.NoError(t, err)

	fmt.Println("r:", r)
	fmt.Println("s:", s)
}

func TestEquivalenceVerification(t *testing.T) {
	pubKeyHex := "9ae546acb8d4d956c3a37222fe64118edd8a4691d23c6d2310d7a383a1a8e31eafafe08ac688af5cd1291d1973f1dbebc2898003e42948073d777cb3368e4c06"
	rHex := "2a33ee77270ba2aea3cb0331406a9f6dfaff45c4b759509eb85677d308e5fcf4"
	sHex := "5a4c79407f91b792915992124f41c079dbae6e74463be5fc23d4af0ad91f680b"

	pubKeyBytes, _ := hex.DecodeString(pubKeyHex)
	xBytes, yBytes := pubKeyBytes[0:32], pubKeyBytes[32:64]
	rBytes, _ := hex.DecodeString(rHex)
	sBytes, _ := hex.DecodeString(sHex)

	x := new(big.Int).SetBytes(xBytes)
	y := new(big.Int).SetBytes(yBytes)
	r := new(big.Int).SetBytes(rBytes)
	s := new(big.Int).SetBytes(sBytes)

	hash := sha256.New()
	hash.Write([]byte("hello"))
	message := hash.Sum(nil)

	pubKey := &ecdsa.PublicKey{
		Curve: secp256k1.S256(),
		X:     x,
		Y:     y,
	}
	valid := ecdsa.Verify(pubKey, message, r, s)
	fmt.Println(valid)
}
